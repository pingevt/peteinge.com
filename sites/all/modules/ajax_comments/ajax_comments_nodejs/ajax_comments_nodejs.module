<?php

/**
 * @file
 *  AJAX Comments Nodejs Integration module file
 */

/**
 * Implements hook_preprocess_node()
 */
function ajax_comments_nodejs_process_node(&$variables) {
  if (isset($variables['content']['comments']) && $variables['node']->comment == COMMENT_NODE_OPEN && ajax_comments_node_type_active($variables['node']->type, $variables['elements']['#view_mode'])) {
    // Enable channel for current node.
    nodejs_send_content_channel_token('ajax_comments_nodejs_' . $variables['node']->nid);
    drupal_add_js(drupal_get_path('module', 'ajax_comments_nodejs') . '/nodejs.ajaxcomments.js', array('type' => 'file'));
    drupal_add_js(drupal_get_path('module', 'ajax_comments') .'/ajax_comments.js', 'file');
  }
}

/**
 * Implements hook_comment_update()
 */
function ajax_comments_nodejs_comment_update($comment) {
  $authToken = !empty($_SESSION['nodejs_config']['authToken']) ? $_SESSION['nodejs_config']['authToken'] : 0;
  $node = node_load($comment->nid);
  $comment_build = comment_view($comment, $node);
  $comment_output = drupal_render($comment_build);

  /**
   * comment_goodnes module compatibility:
   * 1 - Older first
   * 2 - Newer first
   */
  $sort = variable_get('comment_default_sorting_' . $node->type, 1);

  if ($comment->status == $comment->original->status) {
    if ($comment->status == COMMENT_PUBLISHED) {
      // Update existing comment
      $commands[] = array('command' => 'ajaxCommentsReplace', 'selector' => '.comment-wrapper-' . $comment->cid, 'html' => $comment_output);
    }
  } else {
    if ($comment->status == COMMENT_PUBLISHED) {
      // Publish/Add comment
      $mode = variable_get('comment_default_mode_' . $node->type, COMMENT_MODE_THREADED);
      if ($mode == COMMENT_MODE_THREADED && $comment->pid > 0) {
        // Reply in threaded mode
        $commands[] = array('command' => 'ajaxCommentsAddDummyDivAfter', 'selector' => '.comment-wrapper-' . $comment->pid, 'class' => 'indented');
        if ($sort == 1) {
          // Newer first.
          $commands[] = array('command' => 'ajaxCommentsAppend', 'selector' => '.comment-wrapper-' . $comment->pid . ' + .indented', 'html' => $comment_output);
        } else {
          // Older first.
          $commands[] = array('command' => 'ajaxCommentsPrepend', 'selector' => '.comment-wrapper-' . $comment->pid . ' + .indented', 'html' => $comment_output);
        }
      } else {
        // Flat mode or not reply to comment
        if ($sort == 1) {
          // Newer first.
          $commands[] = array('command' => 'ajaxCommentsAfter', 'selector' => '.comment-wrapper-nid-' . $comment->nid . ' > .ajax-comment-wrapper:last', 'html' => $comment_output);
        } else {
          // Older first.
          $commands[] = array('command' => 'ajaxCommentsBefore', 'selector' => '.comment-wrapper-nid-' . $comment->nid . '> .ajax-comment-wrapper:first', 'html' => $comment_output);
        }
      }
    }
    if ($comment->status == COMMENT_NOT_PUBLISHED) {
      // Unpublish/Hide existing comment
      $commands[] = ajax_command_invoke('.comment-wrapper-' . $comment->cid, 'remove');
    }
  }

  if (!empty($commands)) {
    // One can change some settings (or add new) which are
    // going to node.js channel.
    //drupal_alter('ajax_comments_nodejs_channel', $nodejs_comment);
    $nodejs_comment = (object) array(
      'channel' => 'ajax_comments_nodejs_' . $comment->nid,
      'callback' => 'ajaxCommentsNodejs',
      'authToken' => $authToken,
      'commands' => $commands,
    );
    nodejs_send_content_channel_message($nodejs_comment);
  }
}

/**
 * Implements hook_comment_insert()
 */
function ajax_comments_nodejs_comment_insert($comment) {
  if ($comment->status == COMMENT_PUBLISHED) {
    $authToken = !empty($_SESSION['nodejs_config']['authToken']) ? $_SESSION['nodejs_config']['authToken'] : 0;
    $node = node_load($comment->nid);
    $comment_build = comment_view($comment, $node);
    $comment_output = drupal_render($comment_build);

    /**
     * comment_goodnes module compatibility:
     * 1 - Older first
     * 2 - Newer first
     */
    $sort = variable_get('comment_default_sorting_' . $node->type, 1);
    $mode = variable_get('comment_default_mode_' . $node->type, COMMENT_MODE_THREADED);
    if ($mode == COMMENT_MODE_THREADED && $comment->pid > 0) {
      // Reply in threaded mode
      $commands[] = array('command' => 'ajaxCommentsAddDummyDivAfter', 'selector' => '.comment-wrapper-' . $comment->pid, 'class' => 'indented');
      if ($sort == 1) {
        // Newer first.
        $commands[] = array('command' => 'ajaxCommentsAppend', 'selector' => '.comment-wrapper-' . $comment->pid . ' + .indented', 'html' => $comment_output);
      } else {
        // Older first.
        $commands[] = array('command' => 'ajaxCommentsPrepend', 'selector' => '.comment-wrapper-' . $comment->pid . ' + .indented', 'html' => $comment_output);
      }
    } else {
      // Flat mode or not reply to comment
      if ($sort == 1) {
        // Newer first.
        $commands[] = array('command' => 'ajaxCommentsAfter', 'selector' => '.comment-wrapper-nid-' . $comment->nid . ' > .ajax-comment-wrapper:last', 'html' => $comment_output);
      } else {
        // Older first.
        $commands[] = array('command' => 'ajaxCommentsBefore', 'selector' => '.comment-wrapper-nid-' . $comment->nid . '> .ajax-comment-wrapper:first', 'html' => $comment_output);
      }
    }
    $nodejs_comment = (object) array(
      'channel' => 'ajax_comments_nodejs_' . $comment->nid,
      'callback' => 'ajaxCommentsNodejs',
      'authToken' => $authToken,
      'commands' => $commands,
    );
    nodejs_send_content_channel_message($nodejs_comment);
  }
}

/**
 * Implements hook_comment_delete()
 */
function ajax_comments_nodejs_comment_delete($comment) {
  $authToken = !empty($_SESSION['nodejs_config']['authToken']) ? $_SESSION['nodejs_config']['authToken'] : 0;
  $nodejs_comment = (object) array(
    'channel' => 'ajax_comments_nodejs_' . $comment->nid,
    'callback' => 'ajaxCommentsNodejs',
    'authToken' => $authToken,
    'commands' => array(ajax_command_invoke('.comment-wrapper-' . $comment->cid, 'remove')),
  );
  nodejs_send_content_channel_message($nodejs_comment);
}
